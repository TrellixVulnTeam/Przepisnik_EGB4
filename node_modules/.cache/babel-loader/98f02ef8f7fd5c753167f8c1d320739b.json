{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\przepisnik\\\\src\\\\components\\\\RecipeList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport RecipeForm from './RecipeForm';\nimport Recipe from './Recipe'; // import firebase from 'firebase';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecipeList() {\n  _s();\n\n  //FIREBASE TO ADD\n  // const textareaStorage = firebase.firestore().collection(\"recipeCollection\");\n  // const saveData =\n  // textareaStorage.onSnapshot((querySnapshot) =>{\n  //   const items = [];\n  //   querySnapshot.forEach((doc)=>{\n  //     items.push(doc.data())\n  //   })\n  //   setRecipes(items);\n  // })\n  // useEffect(() => {\n  //   saveData();\n  // }, [])\n  const [recipes, setRecipes] = useState([]);\n\n  const addRecipe = recipe => {\n    if (!recipe.text || /^\\s*$/.test(recipe.text)) {\n      return;\n    }\n\n    const newRecipes = [recipe, ...recipes];\n    setRecipes(newRecipes);\n  };\n\n  const updateRecipe = (recipeId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => item.id === recipeId ? newValue : item));\n  };\n\n  const removeRecipe = id => {\n    const removedArr = [...recipes].filter(recipe => recipe.id !== id);\n    setRecipes(removedArr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(RecipeForm, {\n      onSubmit: addRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Recipe, {\n      recipes: recipes,\n      removeRecipe: removeRecipe,\n      updateRecipe: updateRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RecipeList, \"O/YakigGclqCJkazvNfZLBlWnuY=\");\n\n_c = RecipeList;\nexport default RecipeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeList\");","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/przepisnik/src/components/RecipeList.js"],"names":["React","useState","useEffect","RecipeForm","Recipe","RecipeList","recipes","setRecipes","addRecipe","recipe","text","test","newRecipes","updateRecipe","recipeId","newValue","prev","map","item","id","removeRecipe","removedArr","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAMO,SAAS,GAAGC,MAAM,IAAI;AAC1B,QAAI,CAACA,MAAM,CAACC,IAAR,IAAgB,QAAQC,IAAR,CAAaF,MAAM,CAACC,IAApB,CAApB,EAA+C;AAC7C;AACD;;AAED,UAAME,UAAU,GAAG,CAACH,MAAD,EAAS,GAAGH,OAAZ,CAAnB;AACAC,IAAAA,UAAU,CAACK,UAAD,CAAV;AACD,GAPD;;AASA,QAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3C,QAAI,CAACA,QAAQ,CAACL,IAAV,IAAkB,QAAQC,IAAR,CAAaI,QAAQ,CAACL,IAAtB,CAAtB,EAAmD;AACjD;AACD;;AAEDH,IAAAA,UAAU,CAACS,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYL,QAAZ,GAAuBC,QAAvB,GAAkCG,IAApD,CAAT,CAAV;AACD,GAND;;AAQA,QAAME,YAAY,GAAGD,EAAE,IAAI;AACzB,UAAME,UAAU,GAAG,CAAC,GAAGf,OAAJ,EAAagB,MAAb,CAAoBb,MAAM,IAAIA,MAAM,CAACU,EAAP,KAAcA,EAA5C,CAAnB;AAEAZ,IAAAA,UAAU,CAACc,UAAD,CAAV;AACD,GAJD;;AAMA,sBACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEb;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,OAAO,EAAEF,OADX;AAEE,MAAA,YAAY,EAAEc,YAFhB;AAGE,MAAA,YAAY,EAAEP;AAHhB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GApDQR,U;;KAAAA,U;AAsDT,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport RecipeForm from './RecipeForm';\nimport Recipe from './Recipe';\n// import firebase from 'firebase';\n\nfunction RecipeList() {\n  //FIREBASE TO ADD\n\n  // const textareaStorage = firebase.firestore().collection(\"recipeCollection\");\n\n  // const saveData =\n  // textareaStorage.onSnapshot((querySnapshot) =>{\n  //   const items = [];\n  //   querySnapshot.forEach((doc)=>{\n  //     items.push(doc.data())\n  //   })\n  //   setRecipes(items);\n\n  // })\n  // useEffect(() => {\n  //   saveData();\n  // }, [])\n\n  const [recipes, setRecipes] = useState([]);\n  const addRecipe = recipe => {\n    if (!recipe.text || /^\\s*$/.test(recipe.text)) {\n      return;\n    }\n    \n    const newRecipes = [recipe, ...recipes];\n    setRecipes(newRecipes);\n  };\n\n  const updateRecipe = (recipeId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => (item.id === recipeId ? newValue : item)));\n  };\n\n  const removeRecipe = id => {\n    const removedArr = [...recipes].filter(recipe => recipe.id !== id);\n\n    setRecipes(removedArr);\n  };\n\n  return (\n    <main className=\"main\">\n      <RecipeForm onSubmit={addRecipe} />\n      <Recipe\n        recipes={recipes}\n        removeRecipe={removeRecipe}\n        updateRecipe={updateRecipe}\n      />\n    </main>\n  );\n}\n\nexport default RecipeList;\n"]},"metadata":{},"sourceType":"module"}