{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\przepisnik\\\\src\\\\components\\\\RecipeList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport RecipeForm from './RecipeForm';\nimport Recipe from './Recipe';\nimport firebase from 'firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecipeList() {\n  _s();\n\n  const [recipes, setRecipes] = useState([]);\n  const textareaStorage = firebase.firestore().collection(\"recipeCollection\");\n  textareaStorage.get().then(snapshot => {\n    snapshot.docs.forEach(recipe => {\n      addRecipe();\n    });\n  });\n\n  const addRecipe = recipe => {\n    textareaStorage.add({\n      text: recipe\n    });\n\n    if (!recipe.text || /^\\s*$/.test(recipe.text)) {\n      return;\n    }\n\n    const newRecipes = [recipe, ...recipes];\n    setRecipes(newRecipes);\n  };\n\n  const updateRecipe = (recipeId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => item.id === recipeId ? newValue : item));\n  };\n\n  const removeRecipe = id => {\n    const removedArr = [...recipes].filter(recipe => recipe.id !== id);\n    setRecipes(removedArr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(RecipeForm, {\n      onSubmit: addRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Recipe, {\n      recipes: recipes,\n      removeRecipe: removeRecipe,\n      updateRecipe: updateRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RecipeList, \"O/YakigGclqCJkazvNfZLBlWnuY=\");\n\n_c = RecipeList;\nexport default RecipeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeList\");","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/przepisnik/src/components/RecipeList.js"],"names":["React","useState","RecipeForm","Recipe","firebase","RecipeList","recipes","setRecipes","textareaStorage","firestore","collection","get","then","snapshot","docs","forEach","recipe","addRecipe","add","text","test","newRecipes","updateRecipe","recipeId","newValue","prev","map","item","id","removeRecipe","removedArr","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,UAArB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMO,eAAe,GAAGJ,QAAQ,CAACK,SAAT,GAAqBC,UAArB,CAAgC,kBAAhC,CAAxB;AAEAF,EAAAA,eAAe,CAACG,GAAhB,GAAsBC,IAAtB,CAA4BC,QAAD,IAAc;AACvCA,IAAAA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsBC,MAAM,IAAI;AAC9BC,MAAAA,SAAS;AACV,KAFD;AAGD,GAJD;;AAMA,QAAMA,SAAS,GAAGD,MAAM,IAAI;AACxBR,IAAAA,eAAe,CAACU,GAAhB,CAAoB;AACnBC,MAAAA,IAAI,EAAGH;AADY,KAApB;;AAGF,QAAI,CAACA,MAAM,CAACG,IAAR,IAAgB,QAAQC,IAAR,CAAaJ,MAAM,CAACG,IAApB,CAApB,EAA+C;AAC7C;AACD;;AAGD,UAAME,UAAU,GAAG,CAACL,MAAD,EAAS,GAAGV,OAAZ,CAAnB;AAEAC,IAAAA,UAAU,CAACc,UAAD,CAAV;AACD,GAZD;;AAcA,QAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3C,QAAI,CAACA,QAAQ,CAACL,IAAV,IAAkB,QAAQC,IAAR,CAAaI,QAAQ,CAACL,IAAtB,CAAtB,EAAmD;AACjD;AACD;;AAEDZ,IAAAA,UAAU,CAACkB,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYL,QAAZ,GAAuBC,QAAvB,GAAkCG,IAApD,CAAT,CAAV;AACD,GAND;;AAQA,QAAME,YAAY,GAAGD,EAAE,IAAI;AACzB,UAAME,UAAU,GAAG,CAAC,GAAGxB,OAAJ,EAAayB,MAAb,CAAoBf,MAAM,IAAIA,MAAM,CAACY,EAAP,KAAcA,EAA5C,CAAnB;AAEArB,IAAAA,UAAU,CAACuB,UAAD,CAAV;AACD,GAJD;;AAMA,sBACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEb;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,OAAO,EAAEX,OADX;AAEE,MAAA,YAAY,EAAEuB,YAFhB;AAGE,MAAA,YAAY,EAAEP;AAHhB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAhDQjB,U;;KAAAA,U;AAkDT,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport RecipeForm from './RecipeForm';\nimport Recipe from './Recipe';\nimport firebase from 'firebase';\n\nfunction RecipeList() {\n  const [recipes, setRecipes] = useState([]);\n  const textareaStorage = firebase.firestore().collection(\"recipeCollection\");\n\n  textareaStorage.get().then((snapshot) => {\n    snapshot.docs.forEach(recipe => {\n      addRecipe();\n    })\n  })\n\n  const addRecipe = recipe => {\n      textareaStorage.add({\n       text : recipe\n      });\n    if (!recipe.text || /^\\s*$/.test(recipe.text)) {\n      return;\n    }\n\n\n    const newRecipes = [recipe, ...recipes];\n\n    setRecipes(newRecipes);\n  };\n\n  const updateRecipe = (recipeId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setRecipes(prev => prev.map(item => (item.id === recipeId ? newValue : item)));\n  };\n\n  const removeRecipe = id => {\n    const removedArr = [...recipes].filter(recipe => recipe.id !== id);\n\n    setRecipes(removedArr);\n  };\n\n  return (\n    <main className=\"main\">\n      <RecipeForm onSubmit={addRecipe} />\n      <Recipe\n        recipes={recipes}\n        removeRecipe={removeRecipe}\n        updateRecipe={updateRecipe}\n      />\n    </main>\n  );\n}\n\nexport default RecipeList;\n"]},"metadata":{},"sourceType":"module"}